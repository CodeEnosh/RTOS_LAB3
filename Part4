
// Use only core 1 for demo purposes
#if CONFIG_FREERTOS_UNICORE                       //setting the Core to be either cpu 1 or cpu 0 
static const BaseType_t app_cpu = 0;
#else
static const BaseType_t app_cpu = 1;
#endif

// Some string to print
const char msg[] = "Go Home Gota, Kaputu kaaak kaaak kaaak Go Home Gota,";


// Task handles
static TaskHandle_t task_1 = NULL;
static TaskHandle_t task_2 = NULL;
//*****************************************************************************

// Tasks

// Task 1: print to Serial Terminal with lower priority

void startTask1(void *parameter) {
  
  // Count number of characters in string
  int msg_len = strlen(msg);

  // Print string to Terminal
  Serial.print("Task1 is running on core ");
  Serial.println(xPortGetCoreID());


  while (1) {
    Serial.println();
    for (int i = 0; i < msg_len; i++) {
      Serial.print(msg[i]);             //message is printed
    }
    Serial.println();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}


// Task 2: print to Serial Terminal with higher priority

void startTask2(void *parameter) {
  Serial.print("Task2 is running on core ");
  Serial.println(xPortGetCoreID());

  while (1) {
    Serial.print('*');
    vTaskDelay(100 / portTICK_PERIOD_MS);
  }
}

void setup() {
  Serial.begin(300);                   //initialize the Serial monitor
  vTaskDelay(1000 / portTICK_PERIOD_MS);
  Serial.println("Welcome To RTOS");
  

  xTaskCreatePinnedToCore(                                               //use xTaskCreate() in vanila freertos
    startTask1,                         //function for task1
    "Task1",                            //name of the task
    1024,                              //stack size(bytes)
    NULL,                              //parameter to pass to function
    1,                                 //task priority
    &task_1,                          //task handle
    app_cpu);                         //run on 1 core 

  xTaskCreatePinnedToCore(                                                //use xTaskCreate() in vanila freertos
    startTask2,    //function
    "Task2",       //name of the task
    1024,         //stack size(bytes)
    NULL,         //parameter to pass to function
    2,            //task priority
    &task_2,      //task handle
    app_cpu);     //run on 1 core 
}

void loop() {

}
